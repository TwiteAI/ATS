/*
  # Create candidates table

  1. New Tables
    - `candidates`
      - `id` (bigint, primary key)
      - `name` (text, not null)
      - `email` (text, not null)
      - `phone` (text, not null)
      - `skills` (text array, not null)
      - `experience` (integer, not null)
      - `created_at` (timestamp with time zone, default: now())
      - `user_id` (uuid, references auth.users)
  2. Security
    - Enable RLS on `candidates` table
    - Add policies for authenticated users to manage their own data
*/

CREATE TABLE IF NOT EXISTS candidates (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  email text NOT NULL,
  phone text NOT NULL,
  skills text[] NOT NULL,
  experience integer NOT NULL,
  created_at timestamptz DEFAULT now(),
  user_id uuid REFERENCES auth.users(id)
);

ALTER TABLE candidates ENABLE ROW LEVEL SECURITY;

-- Policy for users to select their own candidates
CREATE POLICY "Users can view their own candidates"
  ON candidates
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Policy for users to insert their own candidates
CREATE POLICY "Users can insert their own candidates"
  ON candidates
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Policy for users to update their own candidates
CREATE POLICY "Users can update their own candidates"
  ON candidates
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id);

-- Policy for users to delete their own candidates
CREATE POLICY "Users can delete their own candidates"
  ON candidates
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);